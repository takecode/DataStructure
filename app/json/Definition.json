[
    {
        "id": "node",
        "definitions": [
            {
                "title": "Definition",
                "description": "The primitive node structure"
            },
            {
                "title": "Node Class",
                "description": "A node is simply a container for a value, plus a pointer to a \"next\" node (which may be null).",
                "list":[
                    "Constructor( Element value, Node nextNode ): Create a new node, with value as its contained value and next as the value of the next pointer",
                    "Node getNext(): Returns the value of node's next pointer",
                    "var getValue(): Returns the value contained in node n",
                    "setValue( var value ): Sets the contained value to be value",
                    "setNext( Node nextNode ): Sets the value of node's next pointer to be nextNode"
                ]
            }
        ]
    },
    {
        "id": "chain",
        "definitions":[
            {
                "title": "Definition",
                "description": "Building a Chain From Nodes."
            },
            {
                "title": "Chain Class",
                "description": "Class Of Chain",
                "list":[
                    "Constructuctor(): Create a new chain",
                    "put( Node node ): put a node to this chain",
                    "Node getFirstNode(): get the first node of this chain",
                    "removeNode( Node node ): remove the node if exist"
                ]
            }
        ]
    },
    {
        "id": "asymptonicNotation",
        "definitions":[
            {
                "title": "Asymptonic Notation",
                "description": "asymptotic notation for mathematically discussing performance characteristics",
                "list":[
                    "The O Notation",
                    "Big-Omega Notation",
                    "Theta Notation",
                    "Little-O Notation",
                    "Little Omega Notation"
                ]
            }
        ]
    },
    {
        "id": "array",
        "definitions":[
            {
                "title": "Array",
                "description": "built-in arrays"
            }
        ]
    },
    {
        "id": "listStructure",
        "definitions":[
            {
                "title": "List Structures",
                "description": "List structures built from either nodes or arrays"
            },
            {
                "title": "List Class",
                "description": "List Abstract Data Type (ADT)",
                "list":[
                    "Iterator getBegin(): Returns the list iterator (we'll define this soon) that represents the first element of the list. Runs in O(1) time.",
                    "Iterator getEnd(): Returns the list iterator that represents one element past the last element in the list. Runs in O(1) time.",
                    "prepend( var value ): Adds a new element at the beginning of a list. Runs in O(1) time.",
                    "insertAfter( Iterator iterator, var value ): Adds a new element immediately after iter. Runs in O(N) time.",
                    "removeFirst(): Removes the element at the beginning of a list. Runs in O(1) time.",
                    "removeAfter( Iterator iterator ): Removes the element immediately after iter. Runs in O(N) time.",
                    "boolean isEmpty(): True if there are no elements in the list. Has a default implementation. Runs in O(1) time.",
                    "var getSize(): Returns the number of elements in the list. Has a default implementation. Runs in O(N) time.",
                    "var getAt( var index ): Returns the nth element in the list, counting from 0. Has a default implementation. Runs in O(N) time.",
                    "setAt( var index, var value ): Assigns a new value to the nth element in the list, counting from 0. Has a default implementation. Runs in O(N) time."
                ]
            }
        ]
    },
    {
        "id": "iterator",
        "definitions":[
            {
                "title": "Iterator",
                "description": "Iterators as an abstract model of enumerating the items in a sequence"
            },
            {
                "title": "Iterator Class",
                "description": "The iterator is another abstraction that encapsulates both access to a single element and incremental movement around the list. Its interface is very similar to the node interface presented in the introduction, but since it is an abstract type, different lists can implement it differently.",
                "list":[
                    "var getValue(): Returns the value of the list element that this iterator refers to.",
                    "setValue( var value ): Assigns a new value to the list element that this iterator refers to.",
                    "moveNext(): Makes this iterator refer to the next element in the list.",
                    "boolean isEqual( Iterator iterator ): True if the other iterator refers to the same list element as this iterator."
                ]
            }
        ]
    },
    {
        "id": "stackAndQueue",
        "definitions":[
            {
                "title": "Stack & Queue",
                "description": "Stacks and queues for computing with last-in/first-out and first-in/first-out orderings"
            }
        ]
    },
    {
        "id": "tree",
        "definitions":[
            {
                "title": "Tree",
                "description": "Binary and general tree structures for searching or representing hierarchical relationships"
            }
        ]
    },
    {
        "id": "heap",
        "definitions":[
            {
                "title": "Heap",
                "description": "Min and max heaps for representing ordering based on priorities"
            }
        ]
    },
    {
        "id": "graph",
        "definitions":[
            {
                "title": "Graph",
                "description": "Graph structures for representing more general relationships between data elements"
            }
        ]
    },
    {
        "id": "hash",
        "definitions":[
            {
                "title": "Hash Table",
                "description": "Hash tables for the efficient retrieval of strings and other objects"
            }
        ]
    }
]

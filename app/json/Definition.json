[
    {
        "id": "node",
        "definitions": [
            {
                "title": "Definition",
                "description": "The primitive node structure"
            },
            {
                "title": "Node Class",
                "description": "A node is simply a container for a value, plus a pointer to a \"next\" node (which may be null).",
                "list":[
                    "Constructor( Element value, Node nextNode ): Create a new node, with value as its contained value and next as the value of the next pointer",
                    "Node getNext(): Returns the value of node's next pointer",
                    "Element getValue(): Returns the value contained in node n",
                    "setValue( Element value ): Sets the contained value to be value",
                    "setNext( Node nextNode ): Sets the value of node's next pointer to be nextNode"
                ]
            }
        ]
    },
    {
        "id": "chain",
        "definitions":[
            {
                "title": "Definition",
                "description": "Building a Chain From Nodes."
            },
            {
                "title": "Chain",
                "description": "Class Of Chain",
                "list":[
                    "Constructuctor(): Create a new chain",
                    "put( Node node ): put a node to this chain",
                    "Node getFirstNode(): get the first node of this chain",
                    "removeNode( Node node ): remove the node if exist"
                ]
            }
        ]
    },
    {
        "id": "asymptonicNotation",
        "definitions":[
            {
                "title": "Asymptonic Notation",
                "description": "asymptotic notation for mathematically discussing performance characteristics",
                "list":[
                    "The O Notation",
                    "Big-Omega Notation",
                    "Theta Notation",
                    "Little-O Notation",
                    "Little Omega Notation"
                ]
            }
        ]
    },
    {
        "id": "array",
        "definitions":[
            {
                "title": "Array",
                "description": "built-in arrays"
            }
        ]
    },
    {
        "id": "listStructure",
        "definitions":[
            {
                "title": "List Structures",
                "description": "List structures built from either nodes or arrays"
            }
        ]
    },
    {
        "id": "iterator",
        "definitions":[
            {
                "title": "Iterator",
                "description": "Iterators as an abstract model of enumerating the items in a sequence"
            }
        ]
    },
    {
        "id": "stackAndQueue",
        "definitions":[
            {
                "title": "Stack & Queue",
                "description": "Stacks and queues for computing with last-in/first-out and first-in/first-out orderings"
            }
        ]
    },
    {
        "id": "tree",
        "definitions":[
            {
                "title": "Tree",
                "description": "Binary and general tree structures for searching or representing hierarchical relationships"
            }
        ]
    },
    {
        "id": "heap",
        "definitions":[
            {
                "title": "Heap",
                "description": "Min and max heaps for representing ordering based on priorities"
            }
        ]
    },
    {
        "id": "graph",
        "definitions":[
            {
                "title": "Graph",
                "description": "Graph structures for representing more general relationships between data elements"
            }
        ]
    },
    {
        "id": "hash",
        "definitions":[
            {
                "title": "Hash Table",
                "description": "Hash tables for the efficient retrieval of strings and other objects"
            }
        ]
    }
]
